#' @title bin_probability
#' @description gives the probability of the number of successes within fixed trials of a random variable following a binomial distribution
#' @param n: the number of total objects
#' @param k: number of draws
#' @return numeric
#' @export
#' @example
#' bin_probability(5, .5, 2)
bin_probability <- function(trials, prob, success){
check_prob(prob)
check_success(trials, success)
check_trials(trials)
bin_probability <- bin_choose(trials, success)*(prob^success)*((1-prob)^(trials-success))
return(bin_probability)
}
#' @title bin_distribution
#' @description dives a data frame with the probability distribution, successes in first column and probabilites in the second column.
#' @param trials: the number of trials.
#' @param prob: probability of success
#' @return data frame of numeric output of successes and probability
#' @export
#' @example
#' bin_distribution(5, .5)
bin_distribution <- function(trials, prob) {
success <- 0:trials
probability <- rep(0, (trials + 1))
for (i in 0:trials) {
probability[i+1] <- bin_probability(trials, prob, i)}
dat <- data.frame(success, probability)
class(dat) <- c("bindis", "data.frame")
return(dat)
}
#' @export
#' @example
#'
#' plot.bindis(bindis)
plot.bindis <- function(dat){
plot <- barplot(dat$probability, xlab = "success", ylab = 'probability', names.arg = dat$success)
return(plot)
}
#' @title bin_cumulative
#' @description dives a data frame with the probability distribution, successes in first column and probabilites in the second column and the cumlutaive probability in the 3rd.
#' @param trials: the number of trials.
#' @param prob: probability of success
#' @return data frame of numeric output of successes and probability
#' @export
#' @example
#' bin_cumulative(5, .5)
bin_cumulative <- function(trials, prob){
success <- 0:trials
probability <- rep(0, (trials + 1))
cumulative <- rep(0, (trials + 1))
for (i in 0:trials) {
probability[i+1] <- bin_probability(trials, prob, i)
}
for (i in 1:(trials + 1)) {
cumulative[i] <- sum(probability[0:i])}
dat <- data.frame(success, probability, cumulative)
class(dat) = c("bincum", "data.frame")
return(dat)
}
#' @export
#' @example
#' cumu1 <- bin_cumulative(5, .4)
#' plot.bincum(cumu1)
plot.bincum <- function(bincum) {
plot <- plot(x = bincum$success, y = bincum$cumulative, type = "b", xlab = "success", ylab = "proability")
return(plot)
}
#' @title bin_variable
#' @description creats an object that is a binomial random variable
#' @param trials: the number of trials.
#' @param prob: probability of success
#' @return data frame of numeric output of successes and probability
#' @export
#' @example
#' bin_variable(5, .5)
bin_variable <- function(trials, prob){
check_trials(trials)
check_prob(prob)
x <- list(trials = trials, prob = prob)
class(x) = c("binvar")
return(x)
}
#' @export
print.binvar <- function(x){
cat("\"Binomial variable\"")
cat("\n")
cat("\n")
cat("Parameters")
cat("\n")
cat("- number of traials:", x$trials)
cat("\n")
cat("- prob of success:", x$prob)
}
#' @export
summary.binvar <- function(x){
y <- list(trials = x$trials,
prob = x$prob,
mean = aux_mean(x$trials, x$prob),
variance = aux_variance(x$trials, x$prob),
mode = aux_mode(x$trials, x$prob),
skewness = aux_skewness(x$trials, x$prob),
kurtosis = aux_kurtosis(x$trials, x$prob))
class(y) <- "summary.binvar"
return(y)
}
#' @export
print.summary.binvar <- function(y){
cat("\"Summary Binomial\"")
cat("\n")
cat("\n")
cat("Parameters")
cat("\n")
cat("- number of traials:", y$trials)
cat("\n")
cat("- prob of success:", y$prob)
cat("\n")
cat("\n")
cat("Measures")
cat("\n")
cat("-mean:", y$mean)
cat("\n")
cat("-variance:", y$variance)
cat("\n")
cat("-mode:", y$mode)
cat("\n")
cat("-skewness:", y$skewness)
cat("\n")
cat("-kurtosis:", y$kurtosis)
}
#' @title bin_mean
#' @description gives the mean of a binomial variable
#' @param trials: the number of trials.
#' @param prob: probability of success
#' @return numeric
#' @export
#' @example
#' bin_mean(5, .5)
bin_mean <- function(trials, prob){
mean <- aux_mean(trials, prob)
return(mean)
}
#' @title bin_variance
#' @description gives the variance of a binomial variable
#' @param trials: the number of trials.
#' @param prob: probability of success
#' @return numeric
#' @export
#' @example
#' bin_variance(5, .5)
bin_variance <- function(trials, prob){
check_prob(prob)
check_trials(trials)
variance <- aux_variance(trials, prob)
return(variance)
}
#' @title bin_mode
#' @description gives the mode of a binomial variable
#' @param trials: the number of trials.
#' @param prob: probability of success
#' @return numeric
#' @export
#' @example
#' bin_mode(5, .5)
bin_mode <- function(trials, prob){
check_prob(prob)
check_trials(trials)
mode <- aux_mode(trials, prob)
return(mode)
}
#' @title bin_skewness
#' @description gives the skewness of a binomial variable
#' @param trials: the number of trials.
#' @param prob: probability of success
#' @return numeric
#' @export
#' @example
#' bin_skewness(5, .5)
bin_skewness <- function(trials, prob){
check_prob(prob)
check_trials(trials)
skewness <- aux_skewness(trials, prob)
return(skewness)
}
#' @title bin_kurtosis
#' @description gives the kurtosis of a binomial variable
#' @param trials: the number of trials.
#' @param prob: probability of success
#' @return numeric
#' @export
#' @example
#' bin_mean(5, .5)
bin_kurtosis <- function(trials, prob){
check_prob(prob)
check_trials(trials)
kurtosis <- aux_kurtosis(trials, prob)
return(kurtosis)
}
devtools::build_vignettes()
library(Binomial)
devtools::build_vignettes()
devtools::build()
devtools::install()
devtools::check()
devtools::check()
devtools::build()
# PRIVATE FUNCTIONS
# title check_prob
# description  detetermins wheter a probability is acceptable.
# param prob: the probability of a given event
# logical, TRUE or FALSE
check_prob <- function(prob){
if (prob > 1 | prob < 0) {
stop("prob has to be a number between 0 and 1")
} else {
check_prob <- prob <= 1 & prob >= 0
return(check_prob)}
}
#title check_trials
#description  tests for a valid number of trials
#param trials: the number of fixed trials
#return logical, TRUE or FALSE
check_trials <- function(trials){
test <- all.equal(trials, as.integer(trials), check.attributes = F)
if (test == TRUE & trials >= 0) {
return(TRUE)
} else {
stop("invalid trials value")
}}
# title check_success
# description  tests for a valid number of success
# param trials: the number of fixed trials
# param success: the number of successes specified
# return logical, TRUE or FALSE
check_success <- function(trials, success){
test1 <- all.equal(trials, as.integer(trials), check.attributes = F)
test2 <- all.equal(success, as.integer(success), check.attributes = FALSE)
if (test1 == TRUE & trials >= 0 & test2 == T & success >=0 & trials >= success) {
return(TRUE)
} else {
stop("invaled success and trial combination")
}}
#PRIVATE AUXILIARY FUNCTIONS
# title aux_mean
# description  calculates binomial mean or expected value
# param trials: the number of fixed trials
# param prob: probability of success
# return numeric output
aux_mean <- function(trials, prob){
aux_mean <- trials*prob
return(aux_mean)
}
# title aux_variance
# description  calculates binomial variace.
# param trials: the number of fixed trials
# param prob: probability of success
# return numeric
aux_variance <- function(trials, prob){
aux_variance <- trials*prob*(1-prob)
return(aux_variance)
}
# title aux_mode
# description  For 0<p<1, the most likely number of success in n independent trials with probability p of success on each trial is the mode.
# param trials: the number of fixed trials
# param prob: probability of success
# return numeric
aux_mode <- function(trials, prob){
aux_mode <- round(trials*prob + prob)
return(aux_mode)
}
# title aux_skewness
# description measurement of the aysymetery of a distribution
# param trials: the number of fixed trials
# param prob: probability of success
# return numeric
aux_skewness<- function(trials, prob){
aux_skewness <- (1-2*prob)/(sqrt(trials*prob*(1- prob)))
return(aux_skewness)
}
# title aux_skewness
# description measurement of the "tailedness" of a distribution
# param trials: the number of fixed trials
# param prob: probability of success
# return numeric
aux_kurtosis <- function(trials, prob){
aux_kurtosis <- (1-6*prob*(1-prob))/(trials*prob*(1-prob))
return(aux_kurtosis)
}
#MAIN FUNCTIONS
#' @title bin_choose
#' @description
#' @param n: the number of total objects
#' @param k: number of draws
#' @return numeric
#' @export
#' @example
#' bin_choose(5, 2)
bin_choose <- function(n, k){
if (k > n) {
stop("k cannot be larger than n")
} else {
bin_choose <- factorial(n)/(factorial(k)*factorial(n-k))
}
return(bin_choose)
}
#' @title bin_probability
#' @description gives the probability of the number of successes within fixed trials of a random variable following a binomial distribution
#' @param n: the number of total objects
#' @param k: number of draws
#' @return numeric
#' @export
#' @example
#' bin_probability(5, .5, 2)
bin_probability <- function(trials, prob, success){
check_prob(prob)
check_success(trials, success)
check_trials(trials)
bin_probability <- bin_choose(trials, success)*(prob^success)*((1-prob)^(trials-success))
return(bin_probability)
}
#' @title bin_distribution
#' @description dives a data frame with the probability distribution, successes in first column and probabilites in the second column.
#' @param trials: the number of trials.
#' @param prob: probability of success
#' @return data frame of numeric output of successes and probability
#' @export
#' @example
#' bin_distribution(5, .5)
bin_distribution <- function(trials, prob) {
success <- 0:trials
probability <- rep(0, (trials + 1))
for (i in 0:trials) {
probability[i+1] <- bin_probability(trials, prob, i)}
dat <- data.frame(success, probability)
class(dat) <- c("bindis", "data.frame")
return(dat)
}
#' @export
#' @example
#'
#' plot.bindis(bindis)
plot.bindis <- function(dat){
plot <- barplot(dat$probability, xlab = "success", ylab = 'probability', names.arg = dat$success)
return(plot)
}
#' @title bin_cumulative
#' @description dives a data frame with the probability distribution, successes in first column and probabilites in the second column and the cumlutaive probability in the 3rd.
#' @param trials: the number of trials.
#' @param prob: probability of success
#' @return data frame of numeric output of successes and probability
#' @export
#' @example
#' bin_cumulative(5, .5)
bin_cumulative <- function(trials, prob){
success <- 0:trials
probability <- rep(0, (trials + 1))
cumulative <- rep(0, (trials + 1))
for (i in 0:trials) {
probability[i+1] <- bin_probability(trials, prob, i)
}
for (i in 1:(trials + 1)) {
cumulative[i] <- sum(probability[0:i])}
dat <- data.frame(success, probability, cumulative)
class(dat) = c("bincum", "data.frame")
return(dat)
}
#' @export
#' @example
#' cumu1 <- bin_cumulative(5, .4)
#' plot.bincum(cumu1)
plot.bincum <- function(bincum) {
plot <- plot(x = bincum$success, y = bincum$cumulative, type = "b", xlab = "success", ylab = "proability")
return(plot)
}
#' @title bin_variable
#' @description creats an object that is a binomial random variable
#' @param trials: the number of trials.
#' @param prob: probability of success
#' @return data frame of numeric output of successes and probability
#' @export
#' @example
#' bin_variable(5, .5)
bin_variable <- function(trials, prob){
check_trials(trials)
check_prob(prob)
x <- list(trials = trials, prob = prob)
class(x) = c("binvar")
return(x)
}
#' @export
print.binvar <- function(x){
cat("\"Binomial variable\"")
cat("\n")
cat("\n")
cat("Parameters")
cat("\n")
cat("- number of traials:", x$trials)
cat("\n")
cat("- prob of success:", x$prob)
}
#' @export
summary.binvar <- function(x){
y <- list(trials = x$trials,
prob = x$prob,
mean = aux_mean(x$trials, x$prob),
variance = aux_variance(x$trials, x$prob),
mode = aux_mode(x$trials, x$prob),
skewness = aux_skewness(x$trials, x$prob),
kurtosis = aux_kurtosis(x$trials, x$prob))
class(y) <- "summary.binvar"
return(y)
}
#' @export
print.summary.binvar <- function(y){
cat("\"Summary Binomial\"")
cat("\n")
cat("\n")
cat("Parameters")
cat("\n")
cat("- number of traials:", y$trials)
cat("\n")
cat("- prob of success:", y$prob)
cat("\n")
cat("\n")
cat("Measures")
cat("\n")
cat("-mean:", y$mean)
cat("\n")
cat("-variance:", y$variance)
cat("\n")
cat("-mode:", y$mode)
cat("\n")
cat("-skewness:", y$skewness)
cat("\n")
cat("-kurtosis:", y$kurtosis)
}
#' @title bin_mean
#' @description gives the mean of a binomial variable
#' @param trials: the number of trials.
#' @param prob: probability of success
#' @return numeric
#' @export
#' @example
#' bin_mean(5, .5)
bin_mean <- function(trials, prob){
mean <- aux_mean(trials, prob)
return(mean)
}
#' @title bin_variance
#' @description gives the variance of a binomial variable
#' @param trials: the number of trials.
#' @param prob: probability of success
#' @return numeric
#' @export
#' @example
#' bin_variance(5, .5)
bin_variance <- function(trials, prob){
check_prob(prob)
check_trials(trials)
variance <- aux_variance(trials, prob)
return(variance)
}
#' @title bin_mode
#' @description gives the mode of a binomial variable
#' @param trials: the number of trials.
#' @param prob: probability of success
#' @return numeric
#' @export
#' @example
#' bin_mode(5, .5)
bin_mode <- function(trials, prob){
check_prob(prob)
check_trials(trials)
mode <- aux_mode(trials, prob)
return(mode)
}
#' @title bin_skewness
#' @description gives the skewness of a binomial variable
#' @param trials: the number of trials.
#' @param prob: probability of success
#' @return numeric
#' @export
#' @example
#' bin_skewness(5, .5)
bin_skewness <- function(trials, prob){
check_prob(prob)
check_trials(trials)
skewness <- aux_skewness(trials, prob)
return(skewness)
}
#' @title bin_kurtosis
#' @description gives the kurtosis of a binomial variable
#' @param trials: the number of trials.
#' @param prob: probability of success
#' @return numeric
#' @export
#' @example
#' bin_mean(5, .5)
bin_kurtosis <- function(trials, prob){
check_prob(prob)
check_trials(trials)
kurtosis <- aux_kurtosis(trials, prob)
return(kurtosis)
}
devtools::build()
devtools::install()
devtools::check()
devtools::build()
devtools::install()
devtoo::check()
devtools::check()
